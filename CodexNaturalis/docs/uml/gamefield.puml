@startuml
skinparam linetype ortho
skinparam nodesep 150
skinparam ranksep 100
skinparam dpi 300

!startsub GAMEFIELD
class Point <<immutable>> {
    - x : int {readOnly}
    - y : int {readOnly}
    + Point(x : int, y : int)
    + x() : int
    + y() : int
    + toString() : String
    + equals(Object other) : boolean
    + hashCode() : long
    + sum(other : Point) : Point
    + sum(points : Point...) : Point
    + sum(points : Collection<Point>) : Point {static}
    + scale(factor : int) : Point
}

note "Java record with extra sum() method" as N1
N1 .. Point
/'
class GameField {
    - cards: Map<Point, Card>
    - angles: Map<Point, AngleCell>
    - availableCells: Set<Point>
    - symbolCounters: Map<Symbol, int>

    + GameField()
    + getCards() : Map<Point, Card>
    + getAngles(): Map<Point, Symbol>
    + getCounter(symbol : Symbol) : int
    + placeCard(card : Card, orientation : CardOrientation, position : Point)
    + getAvailablePositions() : Set<Point>
    - addCard(card : Card, orientation : CardOrientation, position : Point)
}'/


class GameField <<synchronized>> {
    - availableCells: Set<Point>
    - symbolCounters: Map<Symbol, int>
    - cardCells : Set<CardCell>
    + getCards() : Set<CardCell>
    + getCardInPosition(position : Points) : CardCell
    + getCardCellByCardId(cardId : int) : CardCell
    + placeCard(position : Point, card : Card, orientation : CardOrientation)
    + getSymbolCount(symbol : Symbol) : int
    + getAvailablePositions() : Set<Point>
}
' Returned sets are immutable copies


class CardCell <<immutable>> {
    - position : Point {readOnly}
    - card : Card {readOnly}
    - cardOrientation : CardOrientation {readOnly}
    - coveredAngles : Set<AnglePosition> {readOnly}
    - CardCell(position : Point, card : Card, orientation : CardOrientation, coveredAngles : coveredAngles : Set<AnglePosition>)
    + CardCell(position : Point, card : Card, orientation : CardOrientation)
    + getPosition() : Point
    + getCard() : Card
    + getCardOrientation() : CardOrientation
    + getCardColor() : CardColor
    + getVisibleCardSide() : CardSide
    + getAdjacentCardsPositions() : Set<Point>
    + getCoveringCardsPositions() : Set<Point>
    + withCoveredAngles(coveredAngles : Set<AnglePosition>) : CardCell
    + equals(Object other) : boolean
    + hashCode() : int // Overridden to use only position
}

class AngleCell <<immutable>> {
     - position : Point {readOnly}
     - topCardPosition : Point {readOnly}
     - bottomCardPosition : Point {readOnly}
     - topSymbol : Point {readOnly}
     - bottomSymbol : Point {readOnly}
     + AngleCell(position : Point, topCardPosition : Point, bottomCardPosition : Point, topSymbol : Symbol, bottomSymbol : Symbol)
     + AngleCell(position : Point, topCardPosition : Point, topSymbol : Point)
     + withNewTopCard(newTopCardPosition : Point, newTopSymbol : Symbol) : AngleCell
}

!endsub

CardCell .r..> Point : <<uses>>
GameField .r..> Point : <<uses>>
GameField --o CardCell : - cardCells

@enduml