@startuml

'If necessary
/'
abstract class ServerLayer {
    - nextLayers : ServerLayer[]
    + ServerLayer(nextLayers : ServerLayer[])
}'/

interface RMILoginController {
    + registerUser(name : String) : int /' temporary code '/
    + login(username : String, temporaryCode : int) : AuthenticatedSession
}

class RMILoginManager extends UnicastResourceObject implements LoginController {
    + LoginManager(userList : UserList)
}

'Socket will use other classes to manage the AuthenticatedSession

interface Controller {
    ' Lobby management
    + createLobby(String name, int playersNumber) : int
    + joinLobby(lobbyId : int)
    + exitFromJoinedLobby()
    + getLobbies() : LobbyInfo[]
    + getJoinedLobbyInfo() : LobbyInfo
    '+ subscribeToLobbyUpdates(lobbyId : int) Automatically done?
    ' Game management
    + getCurrentPlayer() : String
    + getControlledPlayerInfo() : ControlledPlayerInfo
    + getOpponentInfo(opponentName : String) : OpponentPlayer
    + getDrawableCardsInfo() : DrawableCardsInfo
    + getPlayerSetup() : PlayerSetupInfo
    + isLastTurn() : boolean
    + hasGameEnded() throws RemoteException;
    + registerPlayerMove(int placedCardId, Point placementPoint, chosenSide : CardOrientation, drawChoice : DrawChoice) throws RemoteException;
    + getWinnerName() : String
    '+ subscribeToGameUpdates() Automatically done? TBD
}

abstract class FrontierServerLayer{
    - nextLayers : FrontierServerLayer[]
    ' Lobby management
    + createLobby(user : User, String lobbyName, int playersNumber) : int
    + joinLobby(user : User, lobbyId : int)
    + exitFromLobby(user : User)
    + getLobbies(user : User) : LobbyInfo[]
    + getJoinedLobbyInfo(user : User) : LobbyInfo
    + subscribeToLobbyUpdates(lobbyId : int)
    ' Game management
    + getCurrentPlayer(user : User) : String
    + getControlledPlayerInfo(user : User) : ControlledPlayerInfo
    + getOpponentInfo(user : User, opponentName : String) : OpponentPlayer
    + getDrawableCardsInfo(user : User) : DrawableCardsInfo
    + getPlayerSetup(user : User) : PlayerSetupInfo
    + isLastTurn(user : User) : boolean
    + hasGameEnded(user : User) : boolean
    + registerPlayerSetup(user : User, objectiveCardId : int, initialCardSide : CardOrientation)
    + registerPlayerMove(user : User, placedCardId : int, placementPoint : Point, CardOrientation chosenSide, DrawChoice drawChoice) throws RemoteException;
    + getWinnerName(user : User) : String
    + subscribeToGameUpdates(user : User)
}

abstract class InternalServerLayer {
    - nextLayers : InternalServerLayer[]
    + createLobby(creator : User, String lobbyName, int playersNumber) : int
    + addUserToLobby(user : User, Lobby : lobby) : Lobby
    + removeUserFromLobby(user : User, Lobby : lobby) : Lobby
    + getJoinedLobby(user : User) : Lobby
    + subscribeToLobbyUpdates(user : User, lobby : Lobby)
    + getCurrentPlayer(user : User, game : Game) : String
    + getPlayer(Game : game, name : String)
    + getPlayerSetup(Game : Game, playerName : String) : PlayerSetup
    + getDrawableCards(user : User, game : Game) : Map<DrawChoice, Card>
    + getPlayerSetup(user : User, game : Game) : PlayerSetupInfo
    + isLastTurn(game : Game) : boolean
    + hasGameEnded(game : Game) : boolean
    + registerPlayerSetup(game : Game, playerName : String, objectiveCardId : int, initialCardSide : CardOrientation)
    + registerPlayerMove(game : Game, playerName : String int placedCardId, Point placementPoint, CardOrientation chosenSide, DrawChoice drawChoice) throws RemoteException;
    + getWinnerName(Game : game) : String
    + subscribeToGameUpdates(user : User, Game : game)
}

/' Must be in frontier, connecting the Client controller to the FrontierServerLayers '/
class AuthenticatedSession implements Controller{
    - nextLayer : FrontierServerLayer
    - User : user
    + AuthenticatedSession(user : user, nextLayer : FrontierServerLayer)
    // All methods implemented to forward requests to frontier server
}

class IntegrityLayer implements FrontierServerLayer{
    - lobbies : List<Lobby>
    - users : UserList
    - games : GameList
    + IntegrityLayer(List<Lobby> : lobbies, users : UserList, games : GameList)
} /' Required: checks if the operations requested are correct '/
class CachingLayer implements FrontierServerLayer{} /'Optional'/
class ConversionLayer implements FrontierServerLayer{} /' Must be in frontier, connecting to the InternalServerLayers '/
' End of frontier
class TimeoutManagementLayer extends InternalServerLayer{} /'Optional'/
class ExecutionLayer extends InternalServerLayer{} /' Required: Here business logic '/
class PersistenceLayer extends InternalServerLayer{} /'Optional'/

'Just to avoid overcomplicated business logic
'May be implemented directly in Game class
class GameHelpers {
    + makePlayerPlaceCard(playerName : String, cardId : card, position : Point, orientation : CardOrientation)
    + makePlayerDraw(playerName : String, drawChoice : DrawChoice)
    + passTurn()
    + getCurrentPlayer()
    + hasPlayerSetup(playerName : String)
    + allPlayersHaveSetup()
    + calculateObjectivePoints(playerName : String)
    - generatePlayerSetup() : PlayerSetup
}

'May be implemented directly in Lobby class
class LobbyHelpers {
    + createLobby(lobbyId : int, creator : User, requiredPlayers : int)
    + addUserToLobby(user : User, lobby : Lobby)
    + removeUserFromLobby(user : User, lobby : Lobby)
}

@enduml