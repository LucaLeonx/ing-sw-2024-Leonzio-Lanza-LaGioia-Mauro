@startuml
'https://plantuml.com/sequence-diagram

autonumber

== Connection to Server ==
Client --> Server : connectToServer(url : String)
'Es. tcp://localhost:2048

Server --> Client : sendResponse(code : Accepted)

alt Success
    Client --> Server : registerUser(nickname : String)
    Server --> Client : sendResponse(code : Accepted)

else User with the same nickname registered
    Server --> Client : sendResponse(code : DuplicatedUsername)
    Client --> Server : registerUser(newNickname)
end

opt User was already in a Game \n(either playing or waiting to start)
    Server --> Client : addUserToGame(nickname, gameId)
end

group periodically
    Client --> Server : requestGameBoard()
    Server --> Client : sendGameBoard()
end

opt User creates a new game
    Client --> Server : createGame(name, requiredPlayersNum)
    Server --> Client : sendResponse(code : Accepted, payload : gameId)
end
Client --> Server : joinGame(gameId)
note bottom: When a User creates a Game, it joins it automatically. \nDuring updateGameBoard() the game is published to other players

alt Successful join
    Server --> Client : sendResponse(code : Accepted)
    Server --> Server : updateGameBoard()
else Maximum number of players reached \n(someone was quicker to join)
    Server --> Client : sendResponse(code : MaximumPlayersNumberReached)
end

opt Game has reached the required number of players
    Server --> Server : startGame(gameId)
    Server --> Server : updateGameBoard()
end

newpage

== Game initialization ==

Server --> Client : sendPlayerSetupInformation()
note left : Sent setup information: 2 resource cards, 1 gold card, \ninitial card, 2 objective cards
loop On invalid setup choice
Client --> Server : sendSetupChoice(initialCardSide, objectiveCard)
Server --> Client : sendResponse(code : InvalidChoice)
end
Server --> Client : sendResponse(code : Accepted)

newpage

== Player plays a card ==

Server --> Client : sendGameInfo()
note right : Information includes players maps, number of points, visible cards to draw

...Client checks to be the current player and \nchecks the free points on its map...
loop On invalid move
Client --> Server : sendCardToPlay(cardId, Side, Point)
Server --> Client : sendResponse(core : InvalidMove)
else Valid move
Server --> Client : sendResponse(code : Accepted)
end

loop On invalid move
Client --> Server : sendDrawCommand(card, deckCode)
Server --> Client : sendResponse(code : InvalidDraw)
else Valid move
Server --> Client : sendResponse(code : Accepted)
end
Server --> Client : sendGameInfo()
note right : Send update to the other clients

@enduml